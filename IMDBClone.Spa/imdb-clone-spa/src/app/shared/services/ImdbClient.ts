//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class ImdbClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getActors(): Observable<ActorDto[]> {
        let url_ = this.baseUrl + "/api/actors";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActors(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ActorDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ActorDto[]>;
        }));
    }

    protected processGetActors(response: HttpResponseBase): Observable<ActorDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ActorDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ActorDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createActor(body?: ActorForm | undefined): Observable<ActorDto> {
        let url_ = this.baseUrl + "/api/actors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateActor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateActor(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ActorDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ActorDto>;
        }));
    }

    protected processCreateActor(response: HttpResponseBase): Observable<ActorDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActorDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ActorDto>(null as any);
    }

    /**
     * @return Success
     */
    getActor(actorId: string): Observable<ActorDto> {
        let url_ = this.baseUrl + "/api/actors/{actorId}";
        if (actorId === undefined || actorId === null)
            throw new Error("The parameter 'actorId' must be defined.");
        url_ = url_.replace("{actorId}", encodeURIComponent("" + actorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActor(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ActorDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ActorDto>;
        }));
    }

    protected processGetActor(response: HttpResponseBase): Observable<ActorDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActorDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ActorDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateActor(actorId: string, body?: ActorForm | undefined): Observable<ActorDto> {
        let url_ = this.baseUrl + "/api/actors/{actorId}";
        if (actorId === undefined || actorId === null)
            throw new Error("The parameter 'actorId' must be defined.");
        url_ = url_.replace("{actorId}", encodeURIComponent("" + actorId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateActor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateActor(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ActorDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ActorDto>;
        }));
    }

    protected processUpdateActor(response: HttpResponseBase): Observable<ActorDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActorDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ActorDto>(null as any);
    }

    /**
     * @return Success
     */
    deleteActor(actorId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/actors/{actorId}";
        if (actorId === undefined || actorId === null)
            throw new Error("The parameter 'actorId' must be defined.");
        url_ = url_.replace("{actorId}", encodeURIComponent("" + actorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteActor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteActor(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteActor(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    getCategories(): Observable<CategoryDto[]> {
        let url_ = this.baseUrl + "/api/categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategories(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryDto[]>;
        }));
    }

    protected processGetCategories(response: HttpResponseBase): Observable<CategoryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createCategory(body?: CategoryForm | undefined): Observable<CategoryDto> {
        let url_ = this.baseUrl + "/api/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryDto>;
        }));
    }

    protected processCreateCategory(response: HttpResponseBase): Observable<CategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDto>(null as any);
    }

    /**
     * @return Success
     */
    getSingleCategory(categoryId: string): Observable<CategoryDto> {
        let url_ = this.baseUrl + "/api/categories/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryDto>;
        }));
    }

    protected processGetSingleCategory(response: HttpResponseBase): Observable<CategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateCategory(categoryId: string, body?: CategoryForm | undefined): Observable<CategoryDto> {
        let url_ = this.baseUrl + "/api/categories/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryDto>;
        }));
    }

    protected processUpdateCategory(response: HttpResponseBase): Observable<CategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDto>(null as any);
    }

    /**
     * @return Success
     */
    deleteCategory(categoryId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/categories/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    getMovies(): Observable<MovieDto[]> {
        let url_ = this.baseUrl + "/api/movies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMovies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMovies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MovieDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MovieDto[]>;
        }));
    }

    protected processGetMovies(response: HttpResponseBase): Observable<MovieDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MovieDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MovieDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createMovie(body?: MovieForm | undefined): Observable<MovieDto> {
        let url_ = this.baseUrl + "/api/movies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateMovie(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMovie(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MovieDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MovieDto>;
        }));
    }

    protected processCreateMovie(response: HttpResponseBase): Observable<MovieDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MovieDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MovieDto>(null as any);
    }

    /**
     * @return Success
     */
    getSingleMovie(movieId: string): Observable<MovieDto> {
        let url_ = this.baseUrl + "/api/movies/{movieId}";
        if (movieId === undefined || movieId === null)
            throw new Error("The parameter 'movieId' must be defined.");
        url_ = url_.replace("{movieId}", encodeURIComponent("" + movieId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleMovie(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleMovie(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MovieDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MovieDto>;
        }));
    }

    protected processGetSingleMovie(response: HttpResponseBase): Observable<MovieDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MovieDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MovieDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateMovie(movieId: string, body?: MovieForm | undefined): Observable<MovieDto> {
        let url_ = this.baseUrl + "/api/movies/{movieId}";
        if (movieId === undefined || movieId === null)
            throw new Error("The parameter 'movieId' must be defined.");
        url_ = url_.replace("{movieId}", encodeURIComponent("" + movieId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMovie(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMovie(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MovieDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MovieDto>;
        }));
    }

    protected processUpdateMovie(response: HttpResponseBase): Observable<MovieDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MovieDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MovieDto>(null as any);
    }

    /**
     * @return Success
     */
    deleteMovie(movieId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/movies/{movieId}";
        if (movieId === undefined || movieId === null)
            throw new Error("The parameter 'movieId' must be defined.");
        url_ = url_.replace("{movieId}", encodeURIComponent("" + movieId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMovie(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMovie(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMovie(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    getProducers(): Observable<ProducerDto[]> {
        let url_ = this.baseUrl + "/api/producers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProducerDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProducerDto[]>;
        }));
    }

    protected processGetProducers(response: HttpResponseBase): Observable<ProducerDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProducerDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProducerDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createProducer(body?: ProducerForm | undefined): Observable<ProducerDto> {
        let url_ = this.baseUrl + "/api/producers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateProducer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateProducer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProducerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProducerDto>;
        }));
    }

    protected processCreateProducer(response: HttpResponseBase): Observable<ProducerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProducerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProducerDto>(null as any);
    }

    /**
     * @return Success
     */
    getProducer(producerId: string): Observable<ProducerDto> {
        let url_ = this.baseUrl + "/api/producers/{producerId}";
        if (producerId === undefined || producerId === null)
            throw new Error("The parameter 'producerId' must be defined.");
        url_ = url_.replace("{producerId}", encodeURIComponent("" + producerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProducerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProducerDto>;
        }));
    }

    protected processGetProducer(response: HttpResponseBase): Observable<ProducerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProducerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProducerDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateProducer(producerId: string, body?: ProducerForm | undefined): Observable<ProducerDto> {
        let url_ = this.baseUrl + "/api/producers/{producerId}";
        if (producerId === undefined || producerId === null)
            throw new Error("The parameter 'producerId' must be defined.");
        url_ = url_.replace("{producerId}", encodeURIComponent("" + producerId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateProducer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProducer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProducerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProducerDto>;
        }));
    }

    protected processUpdateProducer(response: HttpResponseBase): Observable<ProducerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProducerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProducerDto>(null as any);
    }

    /**
     * @return Success
     */
    deleteProducer(producerId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/producers/{producerId}";
        if (producerId === undefined || producerId === null)
            throw new Error("The parameter 'producerId' must be defined.");
        url_ = url_.replace("{producerId}", encodeURIComponent("" + producerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteProducer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteProducer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteProducer(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class ActorDto implements IActorDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    actingScore?: number;

    constructor(data?: IActorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.bio = _data["bio"];
            this.actingScore = _data["actingScore"];
        }
    }

    static fromJS(data: any): ActorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["bio"] = this.bio;
        data["actingScore"] = this.actingScore;
        return data;
    }

    clone(): ActorDto {
        const json = this.toJSON();
        let result = new ActorDto();
        result.init(json);
        return result;
    }
}

export interface IActorDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    actingScore?: number;
}

export class ActorForm implements IActorForm {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    actingScore?: number;

    constructor(data?: IActorForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.bio = _data["bio"];
            this.actingScore = _data["actingScore"];
        }
    }

    static fromJS(data: any): ActorForm {
        data = typeof data === 'object' ? data : {};
        let result = new ActorForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["bio"] = this.bio;
        data["actingScore"] = this.actingScore;
        return data;
    }

    clone(): ActorForm {
        const json = this.toJSON();
        let result = new ActorForm();
        result.init(json);
        return result;
    }
}

export interface IActorForm {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    actingScore?: number;
}

export class CategoryDto implements ICategoryDto {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): CategoryDto {
        const json = this.toJSON();
        let result = new CategoryDto();
        result.init(json);
        return result;
    }
}

export interface ICategoryDto {
    id?: string | undefined;
    name?: string | undefined;
}

export class CategoryForm implements ICategoryForm {
    name?: string | undefined;

    constructor(data?: ICategoryForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CategoryForm {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }

    clone(): CategoryForm {
        const json = this.toJSON();
        let result = new CategoryForm();
        result.init(json);
        return result;
    }
}

export interface ICategoryForm {
    name?: string | undefined;
}

export enum Gender {
    _0 = 0,
    _1 = 1,
}

export class MovieActorDto implements IMovieActorDto {
    id?: string | undefined;
    value?: string | undefined;

    constructor(data?: IMovieActorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MovieActorDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieActorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }

    clone(): MovieActorDto {
        const json = this.toJSON();
        let result = new MovieActorDto();
        result.init(json);
        return result;
    }
}

export interface IMovieActorDto {
    id?: string | undefined;
    value?: string | undefined;
}

export class MovieActorForm implements IMovieActorForm {
    id?: string | undefined;
    value?: string | undefined;

    constructor(data?: IMovieActorForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MovieActorForm {
        data = typeof data === 'object' ? data : {};
        let result = new MovieActorForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }

    clone(): MovieActorForm {
        const json = this.toJSON();
        let result = new MovieActorForm();
        result.init(json);
        return result;
    }
}

export interface IMovieActorForm {
    id?: string | undefined;
    value?: string | undefined;
}

export class MovieCategoryDto implements IMovieCategoryDto {
    id?: string | undefined;
    value?: string | undefined;

    constructor(data?: IMovieCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MovieCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }

    clone(): MovieCategoryDto {
        const json = this.toJSON();
        let result = new MovieCategoryDto();
        result.init(json);
        return result;
    }
}

export interface IMovieCategoryDto {
    id?: string | undefined;
    value?: string | undefined;
}

export class MovieCategoryForm implements IMovieCategoryForm {
    id?: string | undefined;
    value?: string | undefined;

    constructor(data?: IMovieCategoryForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MovieCategoryForm {
        data = typeof data === 'object' ? data : {};
        let result = new MovieCategoryForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }

    clone(): MovieCategoryForm {
        const json = this.toJSON();
        let result = new MovieCategoryForm();
        result.init(json);
        return result;
    }
}

export interface IMovieCategoryForm {
    id?: string | undefined;
    value?: string | undefined;
}

export class MovieDto implements IMovieDto {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    budget?: number;
    duration?: number;
    releaseDate?: Date;
    externalIds?: string[] | undefined;
    categories?: MovieCategoryDto[] | undefined;
    actors?: MovieActorDto[] | undefined;
    producers?: MovieProducerDto[] | undefined;

    constructor(data?: IMovieDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.budget = _data["budget"];
            this.duration = _data["duration"];
            this.releaseDate = _data["releaseDate"] ? new Date(_data["releaseDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["externalIds"])) {
                this.externalIds = [] as any;
                for (let item of _data["externalIds"])
                    this.externalIds!.push(item);
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(MovieCategoryDto.fromJS(item));
            }
            if (Array.isArray(_data["actors"])) {
                this.actors = [] as any;
                for (let item of _data["actors"])
                    this.actors!.push(MovieActorDto.fromJS(item));
            }
            if (Array.isArray(_data["producers"])) {
                this.producers = [] as any;
                for (let item of _data["producers"])
                    this.producers!.push(MovieProducerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovieDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["budget"] = this.budget;
        data["duration"] = this.duration;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (Array.isArray(this.externalIds)) {
            data["externalIds"] = [];
            for (let item of this.externalIds)
                data["externalIds"].push(item);
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.actors)) {
            data["actors"] = [];
            for (let item of this.actors)
                data["actors"].push(item.toJSON());
        }
        if (Array.isArray(this.producers)) {
            data["producers"] = [];
            for (let item of this.producers)
                data["producers"].push(item.toJSON());
        }
        return data;
    }

    clone(): MovieDto {
        const json = this.toJSON();
        let result = new MovieDto();
        result.init(json);
        return result;
    }
}

export interface IMovieDto {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    budget?: number;
    duration?: number;
    releaseDate?: Date;
    externalIds?: string[] | undefined;
    categories?: MovieCategoryDto[] | undefined;
    actors?: MovieActorDto[] | undefined;
    producers?: MovieProducerDto[] | undefined;
}

export class MovieForm implements IMovieForm {
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    budget?: number;
    duration?: number;
    releaseDate?: Date;
    externalIds?: string[] | undefined;
    categories?: MovieCategoryForm[] | undefined;
    actors?: MovieActorForm[] | undefined;
    producers?: MovieProducerForm[] | undefined;

    constructor(data?: IMovieForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.budget = _data["budget"];
            this.duration = _data["duration"];
            this.releaseDate = _data["releaseDate"] ? new Date(_data["releaseDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["externalIds"])) {
                this.externalIds = [] as any;
                for (let item of _data["externalIds"])
                    this.externalIds!.push(item);
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(MovieCategoryForm.fromJS(item));
            }
            if (Array.isArray(_data["actors"])) {
                this.actors = [] as any;
                for (let item of _data["actors"])
                    this.actors!.push(MovieActorForm.fromJS(item));
            }
            if (Array.isArray(_data["producers"])) {
                this.producers = [] as any;
                for (let item of _data["producers"])
                    this.producers!.push(MovieProducerForm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovieForm {
        data = typeof data === 'object' ? data : {};
        let result = new MovieForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["budget"] = this.budget;
        data["duration"] = this.duration;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (Array.isArray(this.externalIds)) {
            data["externalIds"] = [];
            for (let item of this.externalIds)
                data["externalIds"].push(item);
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.actors)) {
            data["actors"] = [];
            for (let item of this.actors)
                data["actors"].push(item.toJSON());
        }
        if (Array.isArray(this.producers)) {
            data["producers"] = [];
            for (let item of this.producers)
                data["producers"].push(item.toJSON());
        }
        return data;
    }

    clone(): MovieForm {
        const json = this.toJSON();
        let result = new MovieForm();
        result.init(json);
        return result;
    }
}

export interface IMovieForm {
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    budget?: number;
    duration?: number;
    releaseDate?: Date;
    externalIds?: string[] | undefined;
    categories?: MovieCategoryForm[] | undefined;
    actors?: MovieActorForm[] | undefined;
    producers?: MovieProducerForm[] | undefined;
}

export class MovieProducerDto implements IMovieProducerDto {
    id?: string | undefined;
    value?: string | undefined;

    constructor(data?: IMovieProducerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MovieProducerDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieProducerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }

    clone(): MovieProducerDto {
        const json = this.toJSON();
        let result = new MovieProducerDto();
        result.init(json);
        return result;
    }
}

export interface IMovieProducerDto {
    id?: string | undefined;
    value?: string | undefined;
}

export class MovieProducerForm implements IMovieProducerForm {
    id?: string | undefined;
    value?: string | undefined;

    constructor(data?: IMovieProducerForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MovieProducerForm {
        data = typeof data === 'object' ? data : {};
        let result = new MovieProducerForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }

    clone(): MovieProducerForm {
        const json = this.toJSON();
        let result = new MovieProducerForm();
        result.init(json);
        return result;
    }
}

export interface IMovieProducerForm {
    id?: string | undefined;
    value?: string | undefined;
}

export class ProducerDto implements IProducerDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    producerScore?: number;

    constructor(data?: IProducerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.bio = _data["bio"];
            this.producerScore = _data["producerScore"];
        }
    }

    static fromJS(data: any): ProducerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProducerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["bio"] = this.bio;
        data["producerScore"] = this.producerScore;
        return data;
    }

    clone(): ProducerDto {
        const json = this.toJSON();
        let result = new ProducerDto();
        result.init(json);
        return result;
    }
}

export interface IProducerDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    producerScore?: number;
}

export class ProducerForm implements IProducerForm {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    producerScore?: number;

    constructor(data?: IProducerForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.bio = _data["bio"];
            this.producerScore = _data["producerScore"];
        }
    }

    static fromJS(data: any): ProducerForm {
        data = typeof data === 'object' ? data : {};
        let result = new ProducerForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["bio"] = this.bio;
        data["producerScore"] = this.producerScore;
        return data;
    }

    clone(): ProducerForm {
        const json = this.toJSON();
        let result = new ProducerForm();
        result.init(json);
        return result;
    }
}

export interface IProducerForm {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date;
    gender?: Gender;
    bio?: string | undefined;
    producerScore?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}